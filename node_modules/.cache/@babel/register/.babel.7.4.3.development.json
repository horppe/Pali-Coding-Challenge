{
  "{\"sourceRoot\":\"/home/samson/workspace/pali_challenge/src\",\"caller\":{\"name\":\"@babel/node\"},\"cwd\":\"/home/samson/workspace/pali_challenge\",\"filename\":\"/home/samson/workspace/pali_challenge/src/index.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/home/samson/workspace/pali_challenge\",\"plugins\":[{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"loose\":false}},{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"_exploded\":true,\"BlockStatement\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"_verified\":true,\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"regenerator-transform\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ObjectMethod\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]},\"ClassMethod\":{\"exit\":[null]},\"ClassPrivateMethod\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-async-to-generator\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-async-generator-functions\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-object-rest-spread\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-json-strings\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-catch-binding\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"CatchClause\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-member-expression-literals\",\"visitor\":{\"MemberExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-property-literals\",\"visitor\":{\"ObjectProperty\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-reserved-words\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"Identifier\":{\"enter\":[null,null]},\"JSXIdentifier\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}}],\"presets\":[]}:7.4.3": {
    "metadata": {},
    "options": {
      "sourceRoot": "/home/samson/workspace/pali_challenge/src",
      "caller": {
        "name": "@babel/node"
      },
      "cwd": "/home/samson/workspace/pali_challenge",
      "filename": "/home/samson/workspace/pali_challenge/src/index.js",
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "/home/samson/workspace/pali_challenge",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "transform-modules-commonjs",
          "visitor": {
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "loose": false
          }
        },
        {
          "key": "transform-template-literals",
          "visitor": {
            "TaggedTemplateExpression": {
              "enter": [
                null
              ]
            },
            "TemplateLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-literals",
          "visitor": {
            "NumericLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-function-name",
          "visitor": {
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-arrow-functions",
          "visitor": {
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoped-functions",
          "visitor": {
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchCase": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-classes",
          "visitor": {
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-object-super",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-shorthand-properties",
          "visitor": {
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-duplicate-keys",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-computed-properties",
          "visitor": {
            "ObjectExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-for-of",
          "visitor": {
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-sticky-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-dotall-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-spread",
          "visitor": {
            "ArrayExpression": {
              "enter": [
                null
              ]
            },
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "NewExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-parameters",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-destructuring",
          "visitor": {
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoping",
          "visitor": {
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "_verified": true,
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-typeof-symbol",
          "visitor": {
            "UnaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-new-target",
          "visitor": {
            "MetaProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "regenerator-transform",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "exit": [
                null
              ]
            },
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectMethod": {
              "exit": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "exit": [
                null
              ]
            },
            "ClassMethod": {
              "exit": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "exit": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-exponentiation-operator",
          "visitor": {
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "BinaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-async-to-generator",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-async-generator-functions",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-object-rest-spread",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-unicode-property-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-json-strings",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-catch-binding",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "CatchClause": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-named-capturing-groups-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-member-expression-literals",
          "visitor": {
            "MemberExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-property-literals",
          "visitor": {
            "ObjectProperty": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-reserved-words",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "Identifier": {
              "enter": [
                null,
                null
              ]
            },
            "JSXIdentifier": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/home/samson/workspace/pali_challenge/src/index.js",
        "plugins": [
          "asyncGenerators",
          "objectRestSpread",
          "jsonStrings",
          "optionalCatchBinding"
        ]
      },
      "generatorOpts": {
        "filename": "/home/samson/workspace/pali_challenge/src/index.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/home/samson/workspace/pali_challenge/src",
        "sourceFileName": "index.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nrequire(\"@babel/polyfill\");\n\nvar _nodeFetch = _interopRequireDefault(require(\"node-fetch\"));\n\nvar _express = _interopRequireDefault(require(\"express\"));\n\nvar _bodyParser = _interopRequireDefault(require(\"body-parser\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nvar app = (0, _express[\"default\"])();\napp.use(_bodyParser[\"default\"].json());\napp.use(_bodyParser[\"default\"].urlencoded({\n  extended: false\n}));\napp.post('/',\n/*#__PURE__*/\nfunction () {\n  var _ref = _asyncToGenerator(\n  /*#__PURE__*/\n  regeneratorRuntime.mark(function _callee(req, res) {\n    var mealIdList, errorResults, currentMealId, currentIngredientCount, leastMealIngId, leastMealIngCount, i, mealId, response, responseObj, meal, key;\n    return regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            console.log(\"Request Body\", req.body);\n            mealIdList = req.body.mealIdList;\n            errorResults = []; // Counter variables\n\n            currentIngredientCount = 0; // Record Variables\n\n            leastMealIngCount = 0;\n\n            if (!(mealIdList && mealIdList.length)) {\n              _context.next = 26;\n              break;\n            }\n\n            i = 0;\n\n          case 7:\n            if (!(i < mealIdList.length)) {\n              _context.next = 19;\n              break;\n            }\n\n            mealId = mealIdList[i];\n            _context.next = 11;\n            return (0, _nodeFetch[\"default\"])(\"https://www.themealdb.com/api/json/v1/1/lookup.php?i=\".concat(mealId));\n\n          case 11:\n            response = _context.sent;\n            _context.next = 14;\n            return response.json();\n\n          case 14:\n            responseObj = _context.sent;\n\n            if (responseObj.meals.length > 0) {\n              console.log(\"Request has valid parameters\"); // Update current mealId for match\n\n              currentMealId = mealId;\n              currentIngredientCount = 0;\n              meal = responseObj.meals[0];\n\n              for (key in meal) {\n                if (key.indexOf('strIngredient') !== -1 && meal[key] !== \"\") {\n                  // Ingredient match found\n                  console.log(\"Ingredient found in \" + mealId + \"Current ingrdient count is \" + currentIngredientCount);\n                  currentIngredientCount++;\n                }\n              }\n\n              console.log(\"After counting, curent count is: \" + currentIngredientCount); // After counting the ingredients..\n\n              if (leastMealIngCount == 0) {\n                // Update the match found variable\n                leastMealIngCount = currentIngredientCount;\n                leastMealIngId = currentMealId;\n              } else if (currentIngredientCount < leastMealIngCount) {\n                // Update the match found variable\n                leastMealIngCount = currentIngredientCount;\n                leastMealIngId = currentMealId;\n              }\n            } else {\n              errorResults.push(\"Sorry meal with id of \".concat(mealId, \" could not be found\"));\n            }\n\n          case 16:\n            i++;\n            _context.next = 7;\n            break;\n\n          case 19:\n            if (!(errorResults.length > 0)) {\n              _context.next = 23;\n              break;\n            }\n\n            return _context.abrupt(\"return\", res.json({\n              errors: errorResults\n            }));\n\n          case 23:\n            return _context.abrupt(\"return\", res.json({\n              leastIngredientMeal: leastMealIngId\n            }));\n\n          case 24:\n            _context.next = 27;\n            break;\n\n          case 26:\n            return _context.abrupt(\"return\", res.send(\"Please test this service with a post request with a body that contains a 'mealIdList' property which is an array of Meal Ids\"));\n\n          case 27:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function (_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}());\napp.listen(3000, function () {\n  console.log(\"The server is listening at Port: 3000\");\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sIm5hbWVzIjpbImFwcCIsInVzZSIsImJvZHlQYXJzZXIiLCJqc29uIiwidXJsZW5jb2RlZCIsImV4dGVuZGVkIiwicG9zdCIsInJlcSIsInJlcyIsImNvbnNvbGUiLCJsb2ciLCJib2R5IiwibWVhbElkTGlzdCIsImVycm9yUmVzdWx0cyIsImN1cnJlbnRJbmdyZWRpZW50Q291bnQiLCJsZWFzdE1lYWxJbmdDb3VudCIsImxlbmd0aCIsImkiLCJtZWFsSWQiLCJyZXNwb25zZSIsInJlc3BvbnNlT2JqIiwibWVhbHMiLCJjdXJyZW50TWVhbElkIiwibWVhbCIsImtleSIsImluZGV4T2YiLCJsZWFzdE1lYWxJbmdJZCIsInB1c2giLCJlcnJvcnMiLCJsZWFzdEluZ3JlZGllbnRNZWFsIiwic2VuZCIsImxpc3RlbiJdLCJtYXBwaW5ncyI6Ijs7QUFBQTs7QUFFQTs7QUFDQTs7QUFDQTs7Ozs7Ozs7QUFHQSxJQUFJQSxHQUFHLEdBQUcsMEJBQVY7QUFFQUEsR0FBRyxDQUFDQyxHQUFKLENBQVFDLHVCQUFXQyxJQUFYLEVBQVI7QUFFQUgsR0FBRyxDQUFDQyxHQUFKLENBQVFDLHVCQUFXRSxVQUFYLENBQXNCO0FBQUNDLEVBQUFBLFFBQVEsRUFBRTtBQUFYLENBQXRCLENBQVI7QUFFQUwsR0FBRyxDQUFDTSxJQUFKLENBQVMsR0FBVDtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsMEJBQWMsaUJBQU9DLEdBQVAsRUFBWUMsR0FBWjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDVkMsWUFBQUEsT0FBTyxDQUFDQyxHQUFSLENBQVksY0FBWixFQUE0QkgsR0FBRyxDQUFDSSxJQUFoQztBQUNNQyxZQUFBQSxVQUZJLEdBRVNMLEdBQUcsQ0FBQ0ksSUFBSixDQUFTQyxVQUZsQjtBQUdKQyxZQUFBQSxZQUhJLEdBR1csRUFIWCxFQUtWOztBQUVJQyxZQUFBQSxzQkFQTSxHQU9tQixDQVBuQixFQVNWOztBQUVJQyxZQUFBQSxpQkFYTSxHQVdjLENBWGQ7O0FBQUEsa0JBYVBILFVBQVUsSUFBSUEsVUFBVSxDQUFDSSxNQWJsQjtBQUFBO0FBQUE7QUFBQTs7QUFjR0MsWUFBQUEsQ0FkSCxHQWNPLENBZFA7O0FBQUE7QUFBQSxrQkFjVUEsQ0FBQyxHQUFHTCxVQUFVLENBQUNJLE1BZHpCO0FBQUE7QUFBQTtBQUFBOztBQWVJRSxZQUFBQSxNQWZKLEdBZWFOLFVBQVUsQ0FBQ0ssQ0FBRCxDQWZ2QjtBQUFBO0FBQUEsbUJBZ0JxQiwwRkFBOERDLE1BQTlELEVBaEJyQjs7QUFBQTtBQWdCSUMsWUFBQUEsUUFoQko7QUFBQTtBQUFBLG1CQWlCd0JBLFFBQVEsQ0FBQ2hCLElBQVQsRUFqQnhCOztBQUFBO0FBaUJJaUIsWUFBQUEsV0FqQko7O0FBbUJGLGdCQUFHQSxXQUFXLENBQUNDLEtBQVosQ0FBa0JMLE1BQWxCLEdBQTJCLENBQTlCLEVBQWdDO0FBQzVCUCxjQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBWSw4QkFBWixFQUQ0QixDQUU1Qjs7QUFDQVksY0FBQUEsYUFBYSxHQUFHSixNQUFoQjtBQUNBSixjQUFBQSxzQkFBc0IsR0FBRyxDQUF6QjtBQUVLUyxjQUFBQSxJQU51QixHQU1oQkgsV0FBVyxDQUFDQyxLQUFaLENBQWtCLENBQWxCLENBTmdCOztBQU83QixtQkFBUUcsR0FBUixJQUFlRCxJQUFmLEVBQXFCO0FBQ2pCLG9CQUFHQyxHQUFHLENBQUNDLE9BQUosQ0FBWSxlQUFaLE1BQWlDLENBQUMsQ0FBbEMsSUFBdUNGLElBQUksQ0FBQ0MsR0FBRCxDQUFKLEtBQWMsRUFBeEQsRUFBMkQ7QUFDdkQ7QUFDQWYsa0JBQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUFZLHlCQUF5QlEsTUFBekIsR0FBa0MsNkJBQWxDLEdBQWtFSixzQkFBOUU7QUFDQUEsa0JBQUFBLHNCQUFzQjtBQUN6QjtBQUNKOztBQUVETCxjQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBWSxzQ0FBc0NJLHNCQUFsRCxFQWY2QixDQWdCN0I7O0FBQ0Esa0JBQUdDLGlCQUFpQixJQUFJLENBQXhCLEVBQTBCO0FBQ3RCO0FBQ0FBLGdCQUFBQSxpQkFBaUIsR0FBR0Qsc0JBQXBCO0FBQ0FZLGdCQUFBQSxjQUFjLEdBQUdKLGFBQWpCO0FBQ0gsZUFKRCxNQUlPLElBQUlSLHNCQUFzQixHQUFHQyxpQkFBN0IsRUFBZ0Q7QUFDbkQ7QUFDQUEsZ0JBQUFBLGlCQUFpQixHQUFHRCxzQkFBcEI7QUFDQVksZ0JBQUFBLGNBQWMsR0FBR0osYUFBakI7QUFDSDtBQUtILGFBOUJELE1BOEJPO0FBQ0hULGNBQUFBLFlBQVksQ0FBQ2MsSUFBYixpQ0FBMkNULE1BQTNDO0FBQ0g7O0FBbkRDO0FBY2lDRCxZQUFBQSxDQUFDLEVBZGxDO0FBQUE7QUFBQTs7QUFBQTtBQUFBLGtCQXNESEosWUFBWSxDQUFDRyxNQUFiLEdBQXNCLENBdERuQjtBQUFBO0FBQUE7QUFBQTs7QUFBQSw2Q0F1REtSLEdBQUcsQ0FBQ0wsSUFBSixDQUFTO0FBQUN5QixjQUFBQSxNQUFNLEVBQUVmO0FBQVQsYUFBVCxDQXZETDs7QUFBQTtBQUFBLDZDQXlES0wsR0FBRyxDQUFDTCxJQUFKLENBQVM7QUFBQzBCLGNBQUFBLG1CQUFtQixFQUFFSDtBQUF0QixhQUFULENBekRMOztBQUFBO0FBQUE7QUFBQTs7QUFBQTtBQUFBLDZDQTZEQWxCLEdBQUcsQ0FBQ3NCLElBQUosQ0FBUyw4SEFBVCxDQTdEQTs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxHQUFkOztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBb0VBOUIsR0FBRyxDQUFDK0IsTUFBSixDQUFXLElBQVgsRUFBaUIsWUFBTTtBQUNuQnRCLEVBQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUFZLHVDQUFaO0FBQ0gsQ0FGRCIsInNvdXJjZVJvb3QiOiIvaG9tZS9zYW1zb24vd29ya3NwYWNlL3BhbGlfY2hhbGxlbmdlL3NyYyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBcIkBiYWJlbC9wb2x5ZmlsbFwiO1xuXG5pbXBvcnQgZmV0Y2ggZnJvbSAnbm9kZS1mZXRjaCc7XG5pbXBvcnQgZXhwcmVzcyBmcm9tICdleHByZXNzJztcbmltcG9ydCBib2R5UGFyc2VyIGZyb20gJ2JvZHktcGFyc2VyJztcblxuXG52YXIgYXBwID0gZXhwcmVzcygpXG5cbmFwcC51c2UoYm9keVBhcnNlci5qc29uKCkpO1xuXG5hcHAudXNlKGJvZHlQYXJzZXIudXJsZW5jb2RlZCh7ZXh0ZW5kZWQ6IGZhbHNlfSkpO1xuIFxuYXBwLnBvc3QoJy8nLCBhc3luYyAocmVxLCByZXMpID0+e1xuICAgIGNvbnNvbGUubG9nKFwiUmVxdWVzdCBCb2R5XCIsIHJlcS5ib2R5KTtcbiAgICBjb25zdCBtZWFsSWRMaXN0ID0gcmVxLmJvZHkubWVhbElkTGlzdDtcbiAgICBjb25zdCBlcnJvclJlc3VsdHMgPSBbXTtcbiAgICBcbiAgICAvLyBDb3VudGVyIHZhcmlhYmxlc1xuICAgIGxldCBjdXJyZW50TWVhbElkO1xuICAgIGxldCBjdXJyZW50SW5ncmVkaWVudENvdW50ID0gMDtcblxuICAgIC8vIFJlY29yZCBWYXJpYWJsZXNcbiAgICBsZXQgbGVhc3RNZWFsSW5nSWQ7XG4gICAgbGV0IGxlYXN0TWVhbEluZ0NvdW50ID0gMDtcblxuICAgIGlmKG1lYWxJZExpc3QgJiYgbWVhbElkTGlzdC5sZW5ndGgpe1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG1lYWxJZExpc3QubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IG1lYWxJZCA9IG1lYWxJZExpc3RbaV07XG4gICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKGBodHRwczovL3d3dy50aGVtZWFsZGIuY29tL2FwaS9qc29uL3YxLzEvbG9va3VwLnBocD9pPSR7bWVhbElkfWApO1xuICAgICAgICAgICAgY29uc3QgcmVzcG9uc2VPYmogPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XG5cbiAgICAgICAgICAgIGlmKHJlc3BvbnNlT2JqLm1lYWxzLmxlbmd0aCA+IDApe1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiUmVxdWVzdCBoYXMgdmFsaWQgcGFyYW1ldGVyc1wiKVxuICAgICAgICAgICAgICAgIC8vIFVwZGF0ZSBjdXJyZW50IG1lYWxJZCBmb3IgbWF0Y2hcbiAgICAgICAgICAgICAgICBjdXJyZW50TWVhbElkID0gbWVhbElkXG4gICAgICAgICAgICAgICAgY3VycmVudEluZ3JlZGllbnRDb3VudCA9IDA7XG5cbiAgICAgICAgICAgICAgIGNvbnN0IG1lYWwgPSByZXNwb25zZU9iai5tZWFsc1swXTtcbiAgICAgICAgICAgICAgIGZvcihsZXQga2V5IGluIG1lYWwpIHtcbiAgICAgICAgICAgICAgICAgICBpZihrZXkuaW5kZXhPZignc3RySW5ncmVkaWVudCcpICE9PSAtMSAmJiBtZWFsW2tleV0gIT09IFwiXCIpe1xuICAgICAgICAgICAgICAgICAgICAgICAvLyBJbmdyZWRpZW50IG1hdGNoIGZvdW5kXG4gICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiSW5ncmVkaWVudCBmb3VuZCBpbiBcIiArIG1lYWxJZCArIFwiQ3VycmVudCBpbmdyZGllbnQgY291bnQgaXMgXCIgKyBjdXJyZW50SW5ncmVkaWVudENvdW50KVxuICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50SW5ncmVkaWVudENvdW50Kys7XG4gICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIkFmdGVyIGNvdW50aW5nLCBjdXJlbnQgY291bnQgaXM6IFwiICsgY3VycmVudEluZ3JlZGllbnRDb3VudClcbiAgICAgICAgICAgICAgIC8vIEFmdGVyIGNvdW50aW5nIHRoZSBpbmdyZWRpZW50cy4uXG4gICAgICAgICAgICAgICBpZihsZWFzdE1lYWxJbmdDb3VudCA9PSAwKXtcbiAgICAgICAgICAgICAgICAgICAvLyBVcGRhdGUgdGhlIG1hdGNoIGZvdW5kIHZhcmlhYmxlXG4gICAgICAgICAgICAgICAgICAgbGVhc3RNZWFsSW5nQ291bnQgPSBjdXJyZW50SW5ncmVkaWVudENvdW50O1xuICAgICAgICAgICAgICAgICAgIGxlYXN0TWVhbEluZ0lkID0gY3VycmVudE1lYWxJZDtcbiAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoY3VycmVudEluZ3JlZGllbnRDb3VudCA8IGxlYXN0TWVhbEluZ0NvdW50KSB7XG4gICAgICAgICAgICAgICAgICAgLy8gVXBkYXRlIHRoZSBtYXRjaCBmb3VuZCB2YXJpYWJsZVxuICAgICAgICAgICAgICAgICAgIGxlYXN0TWVhbEluZ0NvdW50ID0gY3VycmVudEluZ3JlZGllbnRDb3VudDtcbiAgICAgICAgICAgICAgICAgICBsZWFzdE1lYWxJbmdJZCA9IGN1cnJlbnRNZWFsSWQ7XG4gICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgIFxuXG5cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZXJyb3JSZXN1bHRzLnB1c2goYFNvcnJ5IG1lYWwgd2l0aCBpZCBvZiAke21lYWxJZH0gY291bGQgbm90IGJlIGZvdW5kYCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gSGFuZGxlIHJlc3VsdHNcbiAgICAgICAgaWYoZXJyb3JSZXN1bHRzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIHJldHVybiByZXMuanNvbih7ZXJyb3JzOiBlcnJvclJlc3VsdHN9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiByZXMuanNvbih7bGVhc3RJbmdyZWRpZW50TWVhbDogbGVhc3RNZWFsSW5nSWR9KVxuICAgICAgICB9XG5cbiAgICB9IGVsc2Uge1xuICAgICAgIHJldHVybiByZXMuc2VuZChcIlBsZWFzZSB0ZXN0IHRoaXMgc2VydmljZSB3aXRoIGEgcG9zdCByZXF1ZXN0IHdpdGggYSBib2R5IHRoYXQgY29udGFpbnMgYSAnbWVhbElkTGlzdCcgcHJvcGVydHkgd2hpY2ggaXMgYW4gYXJyYXkgb2YgTWVhbCBJZHNcIik7XG4gICAgfVxuICBcbi8vICByZXMuc2VuZChcIkhlbGxvIFdvcmxkXFxuXCIpXG4gICAgXG59KVxuIFxuYXBwLmxpc3RlbigzMDAwLCAoKSA9PiB7XG4gICAgY29uc29sZS5sb2coXCJUaGUgc2VydmVyIGlzIGxpc3RlbmluZyBhdCBQb3J0OiAzMDAwXCIpXG59KSJdfQ==",
    "map": {
      "version": 3,
      "sources": [
        "index.js"
      ],
      "names": [
        "app",
        "use",
        "bodyParser",
        "json",
        "urlencoded",
        "extended",
        "post",
        "req",
        "res",
        "console",
        "log",
        "body",
        "mealIdList",
        "errorResults",
        "currentIngredientCount",
        "leastMealIngCount",
        "length",
        "i",
        "mealId",
        "response",
        "responseObj",
        "meals",
        "currentMealId",
        "meal",
        "key",
        "indexOf",
        "leastMealIngId",
        "push",
        "errors",
        "leastIngredientMeal",
        "send",
        "listen"
      ],
      "mappings": "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",
      "sourceRoot": "/home/samson/workspace/pali_challenge/src",
      "sourcesContent": [
        "import \"@babel/polyfill\";\n\nimport fetch from 'node-fetch';\nimport express from 'express';\nimport bodyParser from 'body-parser';\n\n\nvar app = express()\n\napp.use(bodyParser.json());\n\napp.use(bodyParser.urlencoded({extended: false}));\n \napp.post('/', async (req, res) =>{\n    console.log(\"Request Body\", req.body);\n    const mealIdList = req.body.mealIdList;\n    const errorResults = [];\n    \n    // Counter variables\n    let currentMealId;\n    let currentIngredientCount = 0;\n\n    // Record Variables\n    let leastMealIngId;\n    let leastMealIngCount = 0;\n\n    if(mealIdList && mealIdList.length){\n        for (let i = 0; i < mealIdList.length; i++) {\n            const mealId = mealIdList[i];\n            const response = await fetch(`https://www.themealdb.com/api/json/v1/1/lookup.php?i=${mealId}`);\n            const responseObj = await response.json();\n\n            if(responseObj.meals.length > 0){\n                console.log(\"Request has valid parameters\")\n                // Update current mealId for match\n                currentMealId = mealId\n                currentIngredientCount = 0;\n\n               const meal = responseObj.meals[0];\n               for(let key in meal) {\n                   if(key.indexOf('strIngredient') !== -1 && meal[key] !== \"\"){\n                       // Ingredient match found\n                       console.log(\"Ingredient found in \" + mealId + \"Current ingrdient count is \" + currentIngredientCount)\n                       currentIngredientCount++;\n                   }\n               }\n\n               console.log(\"After counting, curent count is: \" + currentIngredientCount)\n               // After counting the ingredients..\n               if(leastMealIngCount == 0){\n                   // Update the match found variable\n                   leastMealIngCount = currentIngredientCount;\n                   leastMealIngId = currentMealId;\n               } else if (currentIngredientCount < leastMealIngCount) {\n                   // Update the match found variable\n                   leastMealIngCount = currentIngredientCount;\n                   leastMealIngId = currentMealId;\n               }\n\n               \n\n\n            } else {\n                errorResults.push(`Sorry meal with id of ${mealId} could not be found`);\n            }\n        }\n        // Handle results\n        if(errorResults.length > 0) {\n            return res.json({errors: errorResults});\n        } else {\n            return res.json({leastIngredientMeal: leastMealIngId})\n        }\n\n    } else {\n       return res.send(\"Please test this service with a post request with a body that contains a 'mealIdList' property which is an array of Meal Ids\");\n    }\n  \n//  res.send(\"Hello World\\n\")\n    \n})\n \napp.listen(3000, () => {\n    console.log(\"The server is listening at Port: 3000\")\n})"
      ]
    },
    "sourceType": "script",
    "mtime": 1555640378228
  }
}